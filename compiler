#!/usr/bin/env python3
from typing import List


# ---- GRAMMAR ----
# type var = expr
# var = expr
# if condition
#     ...
# else
#     ...
# def function()
#     ...
LONG_JUMPS = True
REGISTERS = {"ax", "bx", "al", "bl"}

ids = 0
types = {"int", "i8", "i8[]"}
variables = {}

def get_uid():
    global ids
    ids += 1
    return ids - 1


def warnging(msg):
    print(f"\033[33mWARNING: {msg}\033[0m")


def error(msg):
    print(f"\033[31m ERRROR: {msg}\033[0m")
    exit(42)


def jump(jmp, label):
    if LONG_JUMPS:
        uid = "long_jump_" + str(get_uid())
        return f"{jmp} {uid}\njmp {uid}_end\n{uid}:\njmp {label}\n{uid}_end:\n"
    return f"{jmp} {label}\n"


def tokenize(source: str):
    lines = source.split("\n")
    indents = [0]
    tokens = []
    for line in lines:
        indent = 0
        while indent < len(line) and line[indent] in " \t":
            indent += 1
        if indent > indents[-1]:
            indents.append(indent)
            tokens.append("INDENT")
        while indent < indents[-1]:
            tokens.append("DEINDENT")
            indents.pop()
        assert indents[-1] == indent
        tokens += [token for token in line[indent:].split(" ") if token]
    return tokens + ["END"]


def compile(source: str, target: str = "WINTER"):
    code = compile_statements(tokenize(source), 0)[1]
    if code.find("main:") != -1:
        if target == "WINTER":
            code = f"jmp main\n{code}halt:\njmp halt ;$E\n"
        else:
            code = f"jmp main\n{code}hlt\n"
    return code


def compile_statements(tokens, i):
    code = []
    while i < len(tokens) and tokens[i] not in {"END", "DEINDENT"}:
        i, line = compile_statement(tokens, i)
        code.append(line)
    return i, "".join(code)


def compile_statement(tokens: List[str], i: int):
    global variables
    if tokens[i] in types:
        return compile_declaration(tokens, i)
    elif tokens[i] == "def":
        label = tokens[i + 1].split("(", 1)[0]
        assert tokens[i + 2] == "INDENT"
        i, body = compile_statements(tokens, i + 3)
        return i + 1, f"{label}:\n" + body
    elif tokens[i] == "if":
        return compile_if(tokens, i)
    elif tokens[i] == "while":
        return compile_while(tokens, i)
    variable = tokens[i]
    if variable not in variables:
        error(f"variable {variable} is not defined")
    if tokens[i + 1] == "=":
        i, expr = compile_expression(tokens, i + 2, variables[variable])
        if variables[variable] == "int":
            return i, expr + f"pop ax\nmov {variable}, ax\n"
        return i, expr + f"pop al\nmov {variable}, al\n"
    elif tokens[i + 1] == "+=":
        if tokens[i + 2] == "1":
            return i + 3, f"inc {variable}\n"
        return i + 3, f"add {variable}, {tokens[i+2]}\n"
    elif tokens[i + 1] == "-=":
        if tokens[i + 2] == "1":
            return i + 3, f"dec {variable}\n"
        return i + 3, f"sub {variable}, {tokens[i+2]}\n"
    error(f"WTF is {tokens[i + 1]}?")


def compile_if(tokens, i):
    assert tokens[i] == "if"
    label = f"if_{get_uid()}"
    i, condition = compile_boolean_expression(tokens, i + 1, f"{label}_else")
    assert tokens[i] == "INDENT"
    i, then_branch = compile_statements(tokens, i + 1)
    assert tokens[i] == "DEINDENT"
    if tokens[i + 1] == "else":
        assert tokens[i + 2] == "INDENT"
        i, else_branch = compile_statements(tokens, i + 3)
        assert tokens[i] == "DEINDENT"
        code = f"{condition}{then_branch}jmp {label}_end\n"
        code += f"{label}_else:\n{else_branch}{label}_end:\n"
        return i + 1, code
    code = f"{condition}{then_branch}jmp {label}_end\n"
    code += f"{label}_else:\n{label}_end:\n"
    return i + 1, code

def compile_while(tokens, i):
    assert tokens[i] == "while"
    label = f"if_{get_uid()}"
    i, condition = compile_boolean_expression(tokens, i + 1, f"{label}_end")
    assert tokens[i] == "INDENT"
    i, inner_loop = compile_statements(tokens, i + 1)
    assert tokens[i] == "DEINDENT"
    code = f"{label}_begin:\n{condition}{inner_loop}jmp {label}_begin\n"
    code += f"{label}_end:\n"
    return i + 1, code

def compile_boolean_expression(tokens, i, label):
    i, condition = compile_comparison(tokens, i, label)
    while tokens[i] == "and":
        i, next_condition = compile_comparison(tokens, i + 1, label)
        condition += next_condition
    return i, condition


def compile_comparison(tokens, i, label):
    i, expr1 = compile_expression(tokens, i)
    operator = tokens[i]
    assert operator in {"<", ">", "<=", ">=", "==", "!="}
    i, expr2 = compile_expression(tokens, i + 1)
    code = expr1 + expr2 + "pop bx\npop ax\ncmp ax, bx\n"
    operator = {">": "<=", "<": ">=", ">=": "<", "<=": ">", "==": "!=", "!=": "=="}[operator]
    jmp = {"<": "JL", ">": "JG", "<=": "JLE", ">=": "JGE", "!=":"JNE", "==": "JE" }[operator]
    return i, code + jump(jmp, label)


def compile_declaration(tokens, i):
    global variables
    var_type = tokens[i]
    variable = tokens[i + 1]
    if variable in variables:
        warnging(f"{variable} is already defined")
    assert tokens[i + 2] == "="
    value = tokens[i + 3]
    variables[variable] = var_type
    typ = {"int": "dw", "i8": "db", "i8[]": "db"}[var_type]
    return i + 4, f"{variable} {typ} {value}\n"


def compile_expression(tokens: List[str], i: int, target_type: str = "int"):
    if tokens[i] == ":i8":
        target_type = "i8"
        i += 1
    i, code = compile_term(tokens, i, target_type)
    while tokens[i] in "+-":
        operator = tokens[i]
        i, expr = compile_term(tokens, i + 1, target_type)
        code += expr
        if target_type == "int":
            if operator == "+":
                code += "pop bx\npop ax\nadd ax, bx\npush ax\n"
            else:
                code += "pop bx\npop ax\nsub ax, bx\npush ax\n"
        else:
            if operator == "+":
                code += "pop bl\npop al\nadd al, bl\npush al\n"
            else:
                code += "pop bl\npop al\nsub al, bl\npush al\n"
    return i, code


def compile_term(tokens, i, target_type):
    i, code = compile_factor(tokens, i, target_type)
    while tokens[i] in {"*", "/", "./", "%"}:
        operator = tokens[i]
        i, expr = compile_factor(tokens, i + 1, "int")
        code += expr
        if target_type == "int":
            if operator == "*":
                code += "pop bx\npop ax\nimul bx\npush ax\n"
            elif operator == "%":
                code += "pop bx\npop ax\ncwd\nidiv bx\npush dx\n"
            elif operator == "/":
                code += "pop bx\npop ax\ncwd\nidiv bx\npush ax\n"
            else:
                code += "pop bx\npop ax\nmov dx, 0\ndiv bx\npush ax\n"
        else:
            code += "pop al\ncbw\nmov bx, ax\n"
            if operator == "*":
                code += "pop ax\nimul bx\npush al\n"
            elif operator == "%":
                code += "pop ax\ncwd\nidiv bx\npush dl\n"
            elif operator == "/":
                code += "pop ax\ncwd\nidiv bx\npush al\n"
            else:
                code += "pop ax\nmov dx, 0\ndiv bx\npush al\n"
    return i, code


def compile_factor(tokens, i, target_type):
    if tokens[i] == "[":
        source = tokens[i + 1]
        assert variables[source] == "i8[]"
        i, index = compile_expression(tokens, i + 2)
        assert tokens[i] == "]"
        if target_type == "i8":
            return i + 1, index + f"pop ax\nlea si, {source}\nadd si, ax\nmov al, [si]\npush al\n"
        return i + 1, index + f"pop ax\nlea si, {source}\nadd si, ax\nmov ax, [si]\npush ax\n"
    if tokens[i] == "(":
        i, code = compile_expression(tokens, i + 1, target_type)
        assert tokens[i] == ")"
        return i + 1, code
    if tokens[i].isdigit():
        literal = tokens[i]
        if target_type == "int":
            return i + 1, f"mov ax, {literal}\npush ax\n"
        return i + 1, f"mov al, {literal}\npush al\n"
    variable = tokens[i]
    assert variable in variables, variable
    if target_type == "int":
        if variables[variable] == "int":
            return i + 1, f"mov ax, {variable}\npush ax\n"
        if variables[variable] == "i8":
            return i + 1, f"mov al, {variable}\ncbw\npush ax\n"
    else:
        if variables[variable] == "int":
            return i + 1, f"mov ax, {variable}\npush al\n"
        if variables[variable] == "i8":
            return i + 1, f"mov al, {variable}\npush al\n"
    assert False, f"What to do with {variable}:{variables[variable]}?"

def align_stack(assembly: str):
    lines = []
    for line in assembly.split("\n"):
        if line in {"push al", "push bl", "pop al", "pop bl"}:
            lines.append(line.replace("l", "x"))
        else:
            lines.append(line)
    return "\n".join(lines)

def optimize_assembly(assembly: str):
    lines = ["START"]
    unprocessed_lines = list(reversed(assembly.split("\n")))
    while unprocessed_lines:
        line = unprocessed_lines.pop()
        if line.startswith("pop") and lines[-1].startswith("push"):
            x = line.removeprefix("pop ")
            y = lines[-1].removeprefix("push ")
            if x[-1] == y[-1]:
                lines.pop()
                unprocessed_lines.append(f"mov {x}, {y}")
                continue
        if (
            line.startswith("mov")
            and lines[-1].startswith("mov")
        ):
            x, y1 = line.removeprefix("mov ").split(", ")
            y2, z = lines[-1].removeprefix("mov ").split(", ")
            if y1 == y2 and y1 in REGISTERS and (z in REGISTERS or x in REGISTERS):
                lines.pop()
                unprocessed_lines.append(f"mov {x}, {z}")
                continue
        if line.startswith("mov"):
            x, y = line.removeprefix("mov ").split(", ")
            if x == y:
                continue
        lines.append(line)
    return "\n".join(lines[1:])


def prettify_assembly(assembly: str):
    lines = []
    for line in assembly.strip().split("\n"):
        if line and not line.endswith(":"):
            line = "\t" + line
        lines.append(line)
    return "\n".join(lines)


source = """
int a = 8
int b = 3
i8 c = 5
i8 d = -2
int RES = 0

def main():
    if a * d >= 0
        RES = b - ( c + a / d ) * b
    else
        RES = a / b + c - d * a
"""

source = """
"""
print(prettify_assembly(optimize_assembly(align_stack(optimize_assembly(compile(source))))))
