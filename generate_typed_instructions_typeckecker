#!/bin/python3.10

from tokenizer import tokenize
from itertools import product
import specification
import pathlib

def conditions_to_str(conditions, current_indent=0, indent=0):
    result = "if " + " and ".join(conditions) + ":"
    if current_indent + len(result) <= 80:
        return [result]
    result = " " * (indent + 4) + " and ".join(conditions)
    if len(result) <= 80:
        return ["if (", result, " " * indent + "):"]
    result = ["if ("]
    for i, cond in enumerate(conditions):
        result.append(" " * (indent + 4) + "and " * bool(i) + cond)
    return result + [" " * indent + "):"]

def pascal_case(name):
    return name[0].upper() + name[1:].lower()


def generate_case(operator, argument_variants):
    operator = "Operator" + pascal_case(operator)
    operands_count = len(next(iter(argument_variants)))
    if not operands_count:
        return [" " * 8 + f"case {operator}(_):", " " * 12 + "return True"]
    code = []
    for operand_types in sorted(argument_variants):
        operands = ", ".join(f"operand{i}" for i in range(operands_count))
        code.append(" " * 8 + f"case {operator}(_, {operands}, _)")
        conditions = []
        for i, operand in enumerate(operand_types):
            match operand:
                case "immediate":
                    conditions.append(f"is_int(operand{i})")
                case variable_type:
                    conditions.append(f"operand{i} in {variable_type}")
        variables = [
            i for i, arg in enumerate(operand_types) if arg != "immediate"
        ]
        if not variables:
            raise ValueError("Unknown size of a constant operand")
        for i, j in zip(variables, variables[1:]):
            p, q = operand_types[i], operand_types[j]
            conditions.append(f"{p}[operand{i}][1] == {q}[operand{j}][1]")
        conditions = conditions_to_str(conditions, len(code[-1]) + 1, 8)
        code[-1] += " " + conditions[0]
        code += conditions[1:]
        var = f"{operand_types[variables[0]]}[operand{variables[0]}]"
        code.append(" " * 12 + f"instr.size = {var}[1]")
        code.append(" " * 12 + f"return True")
        code.append("")
    return code[:-1]


def generate_typechecker(operators_specification):
    yield " " * 0 + "def typecheck(instr, registers, memory):"
    yield " " * 4 + "match instr:"
    for operator, operand_options in operators_specification.items():
        yield from generate_case(operator, operand_options)
        yield ""
    yield " " * 8 + "case _:"
    yield " " * 12 + "return False"


if __name__ == "__main__":
    code = []
    code.append("from typed_instructions import *")
    code.append("")
    code.append('is_int = lambda num: num.removeprefix("-").isdigit()')
    code.append("")
    code.append("")
    code += generate_typechecker(specification.operators)
    code = "".join(f"{line}\n" for line in code)
    pathlib.Path("typechecker.py").write_text(code)
